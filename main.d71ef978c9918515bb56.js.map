{"version":3,"sources":["webpack:///./task1.js","webpack:///./task2.js","webpack:///./task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","min","max","transaction","id","Math","floor","random","reject","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,kBAAMD,EAAQF,QACxBA,IAGCI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCVXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GAKZA,EAJkBW,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBACWE,EADX,CACiBL,QAASK,EAAKL,SACzBK,UAKZZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCpBrC,IAIQe,EAAkB,SAAC,GAAuB,IAJfC,EAAKC,EAIRC,EAAkB,EAAtBC,GAChBxB,GALuBqB,EAKW,IALNC,EAKW,IAJxCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,IAKlD,OAAO,IAAInB,SAAQ,SAACC,EAASyB,GACzBxB,YAAW,WACYqB,KAAKE,SAAW,GAGjCxB,EAAQ,CAACqB,GAAID,EAAajB,KAAMN,IAEhC4B,EAAO,CAACJ,GAAID,MAEnBvB,OAKD6B,EAAa,SAAC,GAAiB,IAAfL,EAAe,EAAfA,GAAIlB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BgB,EAA3B,iBAA8ClB,EAA9C,QAGIwB,EAAW,SAAC,GAAW,IAATN,EAAS,EAATA,GAClBjB,QAAQwB,KAAR,gCAA6CP,EAA7C,8BAGFJ,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEI,GAAI,GAAIQ,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.d71ef978c9918515bb56.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => resolve(ms));\r\n    }, ms);\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time} ms`);\r\n  \r\n  delay(2000).then(logger); \r\n  delay(1000).then(logger); \r\n  delay(1500).then(logger); \r\n  ","  const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n      return new Promise(resolve => {\r\n          const updatedUsers = allUsers.map(user =>\r\n              user.name === userName\r\n                  ? { ...user, active: !user.active }\r\n                  : user\r\n          ); resolve(updatedUsers);\r\n      });\r\n  }\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = ({id: transaction} ) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      return new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n              const canProcess = Math.random() > 0.3;\r\n  \r\n              if (canProcess) {\r\n                resolve({id: transaction, time: delay});\r\n              } else {\r\n                reject({id: transaction});\r\n              }\r\n      }, delay);\r\n      });\r\n  }\r\n  \r\n  \r\n  const logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time} ms`);\r\n  };\r\n  \r\n  const logError = ({ id }) => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}